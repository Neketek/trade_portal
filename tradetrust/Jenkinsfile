#!groovy

// Testing pipeline

pipeline {
    agent {
        label 'hamlet-latest'
    }
    options {
        timestamps ()
        buildDiscarder(
            logRotator(
                numToKeepStr: '10'
            )
        )
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        parallelsAlwaysFailFast()
        quietPeriod 60
        skipDefaultCheckout()
    }

    parameters {
        booleanParam(
            name: 'force_testing',
            defaultValue: false,
            description: 'run component testing'
        )
    }

    environment {
        DOCKER_BUILD_DIR = "${env.DOCKER_STAGE_DIR}/${BUILD_TAG}"
        COMPOSE_PROJECT_NAME = "${env.JOB_BASE_NAME}"
        PYTHONDONTWRITEBYTECODE = "1"
    }

    stages {

        stage('Clone') {
            steps {
                // Checkout into
                dir("${env.DOCKER_BUILD_DIR}/test/ha-igl-p2/") {
                    script {
                        def repo = checkout scm
                        env['GIT_COMMIT'] = repo.GIT_COMMIT
                    }
                }
            }
        }

        stage('Setup') {
            steps {
                dir("${env.DOCKER_BUILD_DIR}/test/ha-igl-p2/tradetrust") {
                    sh '''#!/bin/bash
                        docker-compose up --build --remove-orphans -d
                        sleep 30s
                    '''
                }

            }
        }

        stage('Worker Testing') {
            when {
                equals expected: true, actual: params.force_testing
            }
            steps {
                dir("${env.DOCKER_BUILD_DIR}/test/ha-igl-p2/tradetrust") {

                    sh '''#!/bin/bash
                    make run

                    sleep 60s

                    make shell-document-store-worker
                    make test-debug
                    '''
                }
            }
        }

        stage('OpenAtt Verify') {
            steps {
                dir("${env.DOCKER_BUILD_DIR}/test/ha-igl-p2/tradetrust") {

                    sh '''#!/bin/bash
                        # Testing
                        docker-compose run --entrypoint '' open-attestation-verify-api npm run test
                    '''
                }
            }
        }

    }

    post {
        success {
            script {
                if ( env.BRANCH_NAME == 'master' ) {
                    build job: '../cotp-devnet/build-clients/master', parameters: [
                        string(name: 'branchref_haiglp2', value: "${env.GIT_COMMIT}")
                    ]
                }
            }
        }

        cleanup {

            dir("${env.DOCKER_BUILD_DIR}/test/ha-igl-p2/tradetrust") {
                sh '''#!/bin/bash
                    make clean
                '''
            }

            cleanWs()
        }
    }
}
